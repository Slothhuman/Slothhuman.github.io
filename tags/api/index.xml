<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>API on Slothhuman&#39;s Blog</title>
        <link>https://slothhuman.github.io/tags/api/</link>
        <description>Recent content in API on Slothhuman&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sat, 11 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://slothhuman.github.io/tags/api/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>RESTful API</title>
        <link>https://slothhuman.github.io/p/restful-api/</link>
        <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>https://slothhuman.github.io/p/restful-api/</guid>
        <description>&lt;img src="https://slothhuman.github.io/img/25.jpg" alt="Featured image of post RESTful API" /&gt;&lt;h2 id=&#34;一什么是restful-api&#34;&gt;一、什么是RESTful API？&lt;/h2&gt;
&lt;p&gt;RESTful API（Representational State Transfer）是一种针对网络应用程序设计的风格和约束。它是一种基于HTTP协议的API，通过对URI的设计和对控制状态的管理来实现资源的管理和处理。&lt;/p&gt;
&lt;h3 id=&#34;11-定义和特点&#34;&gt;1.1 定义和特点&lt;/h3&gt;
&lt;p&gt;RESTful API是建立在REST原则之上的API，具有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于HTTP协议设计，使用标准的HTTP方法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源通过URI进行标识；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;交互操作的状态以HTTP状态码返回，支持缓存机制；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持多种格式，如JSON、XML等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;12-restful规范&#34;&gt;1.2 RESTful规范&lt;/h3&gt;
&lt;p&gt;RESTful API的规范主要包括以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;资源的URI设计应符合RESTful原则；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP方法的使用应符合HTTP协议，并且应使用标准HTTP方法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;交互操作的状态码应符合HTTP状态码的规范；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回的信息应包含必要的描述信息和格式信息；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口应该尽可能简单和一致。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二restful-api设计原则&#34;&gt;二、RESTful API设计原则&lt;/h2&gt;
&lt;p&gt;在设计RESTful API时，应该遵循以下几个原则：&lt;/p&gt;
&lt;h3 id=&#34;21-可读和可理解&#34;&gt;2.1 可读和可理解&lt;/h3&gt;
&lt;p&gt;接口应该具有可读性和可理解性，能够让开发人员和使用者很容易理解其功能和使用方法。&lt;/p&gt;
&lt;h3 id=&#34;22-可以被缓存&#34;&gt;2.2 可以被缓存&lt;/h3&gt;
&lt;p&gt;接口应该支持缓存机制，减少重复请求的次数，提高效率。&lt;/p&gt;
&lt;h3 id=&#34;23-统一的接口&#34;&gt;2.3 统一的接口&lt;/h3&gt;
&lt;p&gt;接口应该具有统一的设计，统一的返回格式和错误码，让开发人员和使用者更容易使用。&lt;/p&gt;
&lt;h3 id=&#34;24-使用hateoas&#34;&gt;2.4 使用HATEOAS&lt;/h3&gt;
&lt;p&gt;HATEOAS（Hypertext As The Engine Of Application State）指的是把超链接嵌入到返回资源中，让客户端能够根据资源状态自主选择下一步操作。&lt;/p&gt;
&lt;h3 id=&#34;25-无状态&#34;&gt;2.5 无状态&lt;/h3&gt;
&lt;p&gt;每个请求都是独立的，服务器不保存请求的上下文信息，这样可使服务更容易扩展。&lt;/p&gt;
&lt;h2 id=&#34;三restful-api请求方法&#34;&gt;三、RESTful API请求方法&lt;/h2&gt;
&lt;p&gt;RESTful API中主要使用以下HTTP方法进行资源的管理和处理:&lt;/p&gt;
&lt;h3 id=&#34;31-get请求&#34;&gt;3.1 GET请求&lt;/h3&gt;
&lt;p&gt;用于获取资源的信息，不会对服务器数据进行修改。&lt;/p&gt;
&lt;h3 id=&#34;32-post请求&#34;&gt;3.2 POST请求&lt;/h3&gt;
&lt;p&gt;用于创建资源，会在服务器上创建一个新的资源。&lt;/p&gt;
&lt;h3 id=&#34;33-put请求&#34;&gt;3.3 PUT请求&lt;/h3&gt;
&lt;p&gt;用于更新资源信息，会更新服务器中已有的资源。&lt;/p&gt;
&lt;h3 id=&#34;34-delete请求&#34;&gt;3.4 DELETE请求&lt;/h3&gt;
&lt;p&gt;用于删除指定的资源，从服务器上删除。&lt;/p&gt;
&lt;h2 id=&#34;四restful-api状态码&#34;&gt;四、RESTful API状态码&lt;/h2&gt;
&lt;p&gt;RESTful API中使用HTTP状态码来表示请求的状态和结果，具体分为以下几类：&lt;/p&gt;
&lt;h3 id=&#34;41-1xx临时响应&#34;&gt;4.1 1xx（临时响应）&lt;/h3&gt;
&lt;p&gt;表示接收到请求并正在处理。&lt;/p&gt;
&lt;h3 id=&#34;42-2xx成功&#34;&gt;4.2 2xx（成功）&lt;/h3&gt;
&lt;p&gt;表示操作成功完成，如200表示正常返回数据，201表示资源已创建。&lt;/p&gt;
&lt;h3 id=&#34;43-3xx重定向&#34;&gt;4.3 3xx（重定向）&lt;/h3&gt;
&lt;p&gt;表示需要进一步操作才能完成请求，如302表示需要重定向到另一个URI，303表示需要重定向到客户端缓存中的URI。&lt;/p&gt;
&lt;h3 id=&#34;44-4xx客户端错误&#34;&gt;4.4 4xx（客户端错误）&lt;/h3&gt;
&lt;p&gt;表示请求错误或无法处理，如400表示请求参数错误，401表示需要认证或授权，403表示没有权限访问资源，404表示找不到资源。&lt;/p&gt;
&lt;h3 id=&#34;45-5xx服务器错误&#34;&gt;4.5 5xx（服务器错误）&lt;/h3&gt;
&lt;p&gt;表示服务器错误或无法完成请求，如500表示服务器内部错误，503表示服务不可用。&lt;/p&gt;
&lt;h2 id=&#34;五restful-api安全&#34;&gt;五、RESTful API安全&lt;/h2&gt;
&lt;p&gt;在设计RESTful API时，需要考虑接口的安全性，主要包括以下几点：&lt;/p&gt;
&lt;h3 id=&#34;51-安全性考虑&#34;&gt;5.1 安全性考虑&lt;/h3&gt;
&lt;p&gt;在设计RESTful API时，需要考虑接口的安全性，包括身份认证、访问控制和数据加密等。&lt;/p&gt;
&lt;h3 id=&#34;52-csrf攻击预防&#34;&gt;5.2 CSRF攻击预防&lt;/h3&gt;
&lt;p&gt;CSRF（Cross-site Request Forgery）攻击是一种通过让用户访问恶意网站来执行攻击的方式，因此需要在RESTful API中加入CSRF攻击的防范措施。&lt;/p&gt;
&lt;h3 id=&#34;53-xss攻击预防&#34;&gt;5.3 XSS攻击预防&lt;/h3&gt;
&lt;p&gt;XSS（Cross-site Scripting）攻击是一种攻击方式，通过在网页中插入恶意脚本来执行攻击，因此需要在RESTful API中加入XSS攻击的防范措施。&lt;/p&gt;
&lt;h2 id=&#34;六restful-api实战步骤&#34;&gt;六、RESTful API实战步骤&lt;/h2&gt;
&lt;p&gt;要创建和使用RESTful API，需要遵循以下步骤：&lt;/p&gt;
&lt;h3 id=&#34;61-创建restful-api&#34;&gt;6.1 创建RESTful API&lt;/h3&gt;
&lt;p&gt;首先，需定义好资源和它们的操作，规定好URI、HTTP方法和返回格式。&lt;/p&gt;
&lt;h3 id=&#34;62-设计api文档&#34;&gt;6.2 设计API文档&lt;/h3&gt;
&lt;p&gt;其次，要编写API文档，包括接口的功能、使用方法、请求参数和返回格式等。&lt;/p&gt;
&lt;h3 id=&#34;63-api测试和调试&#34;&gt;6.3 API测试和调试&lt;/h3&gt;
&lt;p&gt;最后，需要对API进行测试和调试，确保它能够正常地工作，并且符合预期的设计要求。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>API和SPI</title>
        <link>https://slothhuman.github.io/p/api%E5%92%8Cspi/</link>
        <pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>https://slothhuman.github.io/p/api%E5%92%8Cspi/</guid>
        <description>&lt;img src="https://slothhuman.github.io/img/24.jpg" alt="Featured image of post API和SPI" /&gt;&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;API（Application Programming Interface）是应用程序接口的缩写，指的是为应用程序提供服务的一组方法、协议和工具集合。简单来说，API就是一种允许不同软件之间进行交互的接口。通过API，开发人员可以将自己的程序与其他程序进行连接，实现数据交换和共享，从而提高应用程序的功能和性能。API的应用范围很广，包括Web服务、操作系统、数据库、应用程序等。&lt;/p&gt;
&lt;p&gt;SPI（Service Provider Interface）是一种允许用户扩展、替换或定制服务实现的机制。在SPI中，服务接口是一组方法的集合，而服务提供者则是一种能够实现服务接口的类或组件。通过SPI，用户可以动态地加载和使用不同的服务提供者，从而实现服务的定制和扩展。SPI的应用范围主要是Java平台，包括Java核心库、框架、插件等。&lt;/p&gt;
&lt;h2 id=&#34;api的分类&#34;&gt;API的分类&lt;/h2&gt;
&lt;p&gt;API是一种通过预定义的接口规范来实现应用程序间交互的方式。按照使用场景和实现方式的不同，API可以分为多种类型，包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Web API：基于HTTP/HTTPS协议，通过网络提供服务的API。Web API可以使用多种协议和数据格式进行通信，如RESTful API和GraphQL API等。&lt;/li&gt;
&lt;li&gt;操作系统API：用于操作系统的编程接口，提供了访问系统资源和执行操作的方法，如Windows API和Linux系统调用等。&lt;/li&gt;
&lt;li&gt;应用程序API：用于应用程序之间的交互，提供了访问数据和功能的方法，如微软Office API和Google Maps API等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;api的设计原则&#34;&gt;API的设计原则&lt;/h2&gt;
&lt;p&gt;API的设计需要遵循一些基本原则，以保证其易用、可维护、可扩展和可靠。这些原则包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易用性：API应该简单易用，对开发人员友好，提供清晰的文档和示例代码。&lt;/li&gt;
&lt;li&gt;可维护性：API应该易于维护，避免对现有接口进行大规模的修改。&lt;/li&gt;
&lt;li&gt;可扩展性：API应该易于扩展，可以在不破坏原有代码的情况下添加新功能。&lt;/li&gt;
&lt;li&gt;可靠性：API应该稳定可用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spi分类&#34;&gt;SPI分类&lt;/h2&gt;
&lt;p&gt;SPI全称为Service Provider Interface，是一种Java的扩展机制，用于为某个接口提供具体的实现类。在SPI中，服务接口定义了一组抽象方法，而服务提供者则提供了这些方法的具体实现。&lt;/p&gt;
&lt;p&gt;SPI可以分为两类：基于文件的SPI和基于注解的SPI。基于文件的SPI需要在META-INF/services目录下创建一个以服务接口全限定名为名字的文件，文件中列出服务提供者的实现类全限定名；基于注解的SPI则使用@SPI注解来标识服务提供者的实现类。&lt;/p&gt;
&lt;h2 id=&#34;spi的设计原则&#34;&gt;SPI的设计原则&lt;/h2&gt;
&lt;p&gt;SPI设计的原则是开闭原则，即对扩展开放，对修改关闭。这意味着在SPI中，服务接口的定义是稳定的，不应该随意修改，而服务提供者的实现则可以随意扩展。&lt;/p&gt;
&lt;h2 id=&#34;api和spi定义方式的不同&#34;&gt;API和SPI定义方式的不同&lt;/h2&gt;
&lt;p&gt;API是应用程序接口的缩写，它是一种定义了软件系统之间如何进行通信的接口。API可以被看作是一种契约，它规定了系统之间传递的消息格式、参数、返回值等细节，以及使用这些接口的方式。&lt;/p&gt;
&lt;p&gt;SPI是服务提供接口的缩写，它是一种在软件系统中允许插件或模块化扩展的机制。SPI定义了一个通用接口，使得应用程序可以在运行时动态加载和使用模块化扩展，而不需要在编译时就将这些扩展集成进来。&lt;/p&gt;
&lt;h2 id=&#34;api和spi的区别和联系&#34;&gt;API和SPI的区别和联系&lt;/h2&gt;
&lt;p&gt;API和SPI都是软件开发中常用的技术概念，它们在实现方式、使用场景、功能范围等方面存在不同。API是应用程序编程接口，提供了一组可以被其他程序调用的方法或功能，常用于构建客户端应用或者Web服务，使得不同的系统之间可以进行通信和数据交互。SPI是服务提供接口，允许应用程序通过动态加载机制来使用第三方扩展或者组件，它通过提供标准化的接口和约定来实现应用程序的可扩展性和灵活性。&lt;/p&gt;
&lt;h2 id=&#34;应用场景的选择&#34;&gt;应用场景的选择&lt;/h2&gt;
&lt;p&gt;API和SPI在实际应用中有不同的使用场景和目的。API通常用于构建客户端应用和Web服务，通过暴露一组可用的接口和方法，实现不同系统之间的数据交互和通信。常见的API实现方式包括RESTful API和GraphQL API等。SPI则用于实现应用程序的可扩展性和灵活性，允许应用程序通过动态加载第三方&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
