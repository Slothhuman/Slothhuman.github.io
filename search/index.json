[{"content":"简介 在Spring框架中，@RequestParam、@RequestBody、@PathVariable是常用的注解之一。这些注解可以用于控制器（Controller）中的方法参数，方便处理HTTP请求。本文将分别介绍这三个注解的使用方法、原理、代码示例以及它们之间的对比不同。\n1.@RequestParam注解 1.1 使用方法 @RequestParam注解用于将HTTP请求中的参数绑定到控制器方法的参数上。在使用@RequestParam注解时，可以设置参数名、是否必须、默认值等属性。\n示例代码如下：\n1 2 3 4 @GetMapping(\u0026#34;/user\u0026#34;) public User getUser(@RequestParam(\u0026#34;id\u0026#34;) Long id) { return userService.getUserById(id); } 在上面的示例中，@RequestParam注解绑定了请求参数中名为\u0026quot;id\u0026quot;的参数到getUser()方法的id参数上。\n1.2 原理 当Spring Boot应用程序接收到一个HTTP请求时，Spring框架将请求参数解析为一个名-值对的映射。在控制器方法上使用@RequestParam注解时，Spring框架会自动将请求参数的值与控制器方法的参数绑定起来。\n1.3 代码示例 1 2 3 4 5 6 7 @GetMapping(\u0026#34;/user\u0026#34;) public User getUser(@RequestParam(\u0026#34;id\u0026#34;) Long id, @RequestParam(value = \u0026#34;name\u0026#34;, required = false, defaultValue = \u0026#34;Guest\u0026#34;) String name) { User user = userService.getUserById(id); user.setName(name); return user; } 在上面的示例中，我们使用@RequestParam注解绑定了两个请求参数。\u0026ldquo;id\u0026quot;参数是必须的，而\u0026quot;name\u0026quot;参数是可选的。如果请求中没有传递\u0026quot;name\u0026quot;参数，则默认值为\u0026quot;Guest\u0026rdquo;。\n2.@RequestBody注解 2.1 使用方法 @RequestBody注解用于将HTTP请求体绑定到控制器方法的参数上。在使用@RequestBody注解时，我们需要指定请求体的数据类型。\n示例代码如下：\n1 2 3 4 @PostMapping(\u0026#34;/user\u0026#34;) public User createUser(@RequestBody User user) { return userService.createUser(user); } 在上面的示例中，@RequestBody注解绑定了请求体中的数据到createUser()方法的user参数上。\n2.2 原理 当Spring Boot应用程序接收到一个HTTP请求时，Spring框架将请求体解析为一个Java对象。在控制器方法上使用@RequestBody注解时，Spring框架会自动将请求体中的数据绑定到控制器方法的参数上。\n2.3 代码示例 1 2 3 4 5 @PostMapping(\u0026#34;/user\u0026#34;) public User createUser(@RequestBody User user) { User savedUser = userService.createUser(user); return savedUser; } 在上面的示例中，我们使用@RequestBody注解绑定了请求体中的数据到User对象上。Spring框架会自动将请求体中的数据解析为一个User对象，并将其绑定到createUser()方法的user参数上。\n3.@PathVariable注解 3.1 使用方法 @PathVariable注解用于将URL中的参数绑定到控制器方法的参数上。在使用@PathVariable注解时，需要在注解中指定URL中的参数名。\n示例代码如下：\n1 2 3 4 @GetMapping(\u0026#34;/user/{id}\u0026#34;) public User getUser(@PathVariable(\u0026#34;id\u0026#34;) Long id) { return userService.getUserById(id); } 在上面的示例中，@PathVariable注解绑定了URL中名为\u0026quot;id\u0026quot;的参数到getUser()方法的id参数上。\n3.2 原理 当Spring Boot应用程序接收到一个HTTP请求时，Spring框架将请求URL解析为一个名-值对的映射。在控制器方法上使用@PathVariable注解时，Spring框架会自动将URL中的参数值与控制器方法的参数绑定起来。\n3.3 代码示例 1 2 3 4 5 @GetMapping(\u0026#34;/user/{id}\u0026#34;) public User getUser(@PathVariable(\u0026#34;id\u0026#34;) Long id) { User user = userService.getUserById(id); return user; } 在上面的示例中，我们使用@PathVariable注解绑定了URL中的\u0026quot;id\u0026quot;参数到getUser()方法的id参数上。Spring框架会自动将URL中的\u0026quot;id\u0026quot;参数值绑定到id参数上，并调用getUser()方法返回相应的用户对象。\n需要注意的是，@PathVariable注解也可以使用默认值和正则表达式等属性，以适应更多的场景。\n1 2 javaCopy code @GetMapping(\u0026#34;/user/{id:[\\\\d]+}\u0026#34;) public User getUser(@PathVariable(name = \u0026#34;id\u0026#34;, required = true) Long id, @PathVariable(name = \u0026#34;name\u0026#34;, defaultValue = \u0026#34;Guest\u0026#34;) String name) { User user = userService.getUserById(id); user.setName(name); return user; } 在上面的示例中，我们使用正则表达式指定了\u0026quot;id\u0026quot;参数必须为数字，使用了required属性确保\u0026quot;id\u0026quot;参数必须存在。同时，我们使用了defaultValue属性，以便在\u0026quot;name\u0026quot;参数未指定时使用默认值\u0026quot;Guest\u0026quot;。\n对比不同 @RequestParam和@PathVariable都用于将请求参数绑定到控制器方法的参数上，但是它们的作用方式不同。@RequestParam注解绑定的参数是在请求参数中指定的，而@PathVariable注解绑定的参数是在请求URL中指定的。\n@RequestBody注解用于将HTTP请求中的请求体绑定到方法参数上。请求体可以是JSON、XML、二进制数据等类型，与@RequestParam和@PathVariable不同，@RequestBody注解绑定的参数不是单个值，而是整个请求体。\n综上所述，@RequestParam、@RequestBody、@PathVariable这三个注解在实际应用中各有所用，具体使用哪一个取决于控制器方法所需的参数类型和参数来源。\n","date":"2019-03-10T00:00:00Z","image":"https://example.com/img/yes.jpg","permalink":"https://example.com/p/%E5%90%84%E6%9C%89%E5%8D%83%E7%A7%8B%E7%9A%84@requestparam@requestbody@pathvariable/","title":"各有千秋的@RequestParam、@RequestBody、@PathVariable"}]