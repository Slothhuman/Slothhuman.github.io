[{"content":"简介 当今的应用程序通常需要与其他应用程序或服务进行通信，以实现数据的共享和协作。为了实现这种通信，通常需要使用API（Application Programming Interface）接口，而自定义API接口允许应用程序与其他应用程序或服务进行交互。\n而HTTP请求是应用程序之间最常用的通信方式之一，它允许应用程序通过网络向其他应用程序或服务发送请求，并接收返回的响应，使用HTTP请求可以使应用程序与其他应用程序或服务进行交互，共享数据和资源。\nHTTP请求方法 HTTP请求方法是HTTP协议定义的一组标准方法，用于指示客户端要执行的操作类型。常用的HTTP请求方法包括GET、POST、PUT和DELETE。\nGET 用于从服务器获取资源，通过查询参数传递参数，不会改变服务器状态。通常用于获取数据。\nPOST 用于向服务器提交数据，通过请求体传递参数，可能会改变服务器状态。通常用于提交数据，如表单提交、上传文件等。\nPUT 用于向服务器更新资源，通过请求体传递参数，可能会改变服务器状态。通常用于更新数据，如更新文件、更新文章等。\nDELETE 用于从服务器删除资源，通过查询参数传递参数，可能会改变服务器状态。通常用于删除数据。\n其他方法 除了上述常见的HTTP请求方法，还有一些其他的HTTP请求方法，如OPTIONS、HEAD、PATCH等，但它们使用较少，本文不作过多介绍。\n在使用HTTP请求时，应该根据实际需求选择合适的HTTP请求方法，例如，如果只需要获取数据，应该使用GET方法；如果需要向服务器提交数据，应该使用POST方法；如果需要更新数据，应该使用PUT方法；如果需要删除数据，应该使用DELETE方法。此外还需要根据HTTP规范设置请求头和请求体。\nHTTP请求参数 HTTP请求参数是客户端向服务器传递信息的一种方式，包括查询参数、请求头和请求体。\n查询参数 查询参数是通过URL的查询字符串传递的键值对，使用“?”分隔URL和查询参数，使用“\u0026amp;”连接多个查询参数。\n例如，调用一个获取用户信息的接口，需要传递用户ID和名称两个查询参数：\n1 https://example.com/api/users?id=123\u0026amp;name=John 请求头 请求头是HTTP请求中的一部分，包括各种元数据信息，以键值对的形式表示。常用的请求头包括Content-Type、Authorization、Accept等。例如，以下是使用请求头指定请求体类型的示例：\n1 2 3 4 5 POST /api/users HTTP/1.1 Host: example.com Content-Type: application/json {\u0026#34;name\u0026#34;:\u0026#34;John\u0026#34;,\u0026#34;age\u0026#34;:18} 这个示例中，通过POST方法向example.com的/api/users接口提交JSON格式的请求体，使用Content-Type请求头指定请求体类型为application/json。\n请求体 请求体是POST、PUT等方法中发送的数据，用于向服务器提交数据，通常使用JSON或表单数据格式。例如，以下是使用请求体提交表单数据的示例：\n1 2 3 4 5 POST /api/users HTTP/1.1 Host: example.com Content-Type: application/x-www-form-urlencoded name=John\u0026amp;age=18 这个示例中，通过POST方法向example.com的/api/users接口提交表单数据，使用Content-Type请求头指定请求体类型为application/x-www-form-urlencoded。\n在使用HTTP请求时，应该根据实际需求选择合适的HTTP请求参数。例如，如果需要传递一些简单的参数，可以使用查询参数；如果需要传递一些复杂的参数或数据，可以使用请求体；如果需要指定请求的一些元数据信息，可以使用请求头。同时，还应该注意HTTP请求参数的编码方式，避免出现乱码等问题。\nHTTP响应 HTTP响应是服务器返回给客户端的信息，通常包括三个部分：状态行、响应头和响应体。\n状态行 状态行包含三个字段，分别是HTTP版本号、状态码和状态码的原因短语。例如：\n1 HTTP/1.1 200 OK 表示使用HTTP/1.1协议，状态码为200，状态码的原因短语为OK。\n常见的状态码及其含义：\n200 OK：请求成功，服务器返回请求的资源。 301 Moved Permanently：请求的资源已永久移动到新的URI。 302 Found：请求的资源已临时移动到新的URI。 400 Bad Request：请求有语法错误或请求参数不正确。 401 Unauthorized：请求未经授权。 403 Forbidden：请求被服务器拒绝。 404 Not Found：请求的资源未找到。 500 Internal Server Error：服务器内部错误。 响应头 响应头包含一系列键值对，描述了响应的元数据，例如服务器类型、数据格式等。常见的响应头字段及其含义：\nContent-Type：响应的数据类型，例如text/html、application/json等。 Content-Length：响应体的长度。 Server：服务器类型，例如Apache、Nginx等。 Set-Cookie：设置客户端的cookie。 Expires：过期时间，例如Tue, 01 Jan 2030 00:00:00 GMT。 响应头的格式如下：\n1 Key: Value 例如：\n1 2 Content-Type: application/json Server: Apache/2.4.41 (Ubuntu) 响应体 响应体包含了实际的数据内容，例如HTML、JSON等格式的文本数据，或者二进制数据等。\n例如，请求一个返回JSON格式数据的接口，服务器返回的响应体中包含了用户信息：\n1 2 3 4 5 { \u0026#34;id\u0026#34;: 123, \u0026#34;name\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;age\u0026#34;: 18 } 在使用HTTP请求时，需要对响应状态码、响应头和响应体进行处理，根据实际需求进行解析和转换。\n","date":"2022-11-20T00:00:00Z","image":"https://slothhuman.github.io/img/purple.jpg","permalink":"https://slothhuman.github.io/p/%E8%AF%A6%E8%A7%A3http%E8%AF%B7%E6%B1%82/","title":"详解HTTP请求"},{"content":"简介 在Spring框架中，@RequestParam、@RequestBody、@PathVariable是常用的注解之一。这些注解可以用于控制器（Controller）中的方法参数，方便处理HTTP请求。本文将分别介绍这三个注解的使用方法、原理、代码示例以及它们之间的对比不同。\n@RequestParam注解 使用方法 @RequestParam注解用于将HTTP请求中的参数绑定到控制器方法的参数上。在使用@RequestParam注解时，可以设置参数名、是否必须、默认值等属性。\n示例代码如下：\n1 2 3 4 @GetMapping(\u0026#34;/user\u0026#34;) public User getUser(@RequestParam(\u0026#34;id\u0026#34;) Long id) { return userService.getUserById(id); } 在上面的示例中，@RequestParam注解绑定了请求参数中名为\u0026quot;id\u0026quot;的参数到getUser()方法的id参数上。\n原理 当Spring Boot应用程序接收到一个HTTP请求时，Spring框架将请求参数解析为一个名-值对的映射。在控制器方法上使用@RequestParam注解时，Spring框架会自动将请求参数的值与控制器方法的参数绑定起来。\n代码示例 1 2 3 4 5 6 7 @GetMapping(\u0026#34;/user\u0026#34;) public User getUser(@RequestParam(\u0026#34;id\u0026#34;) Long id, @RequestParam(value = \u0026#34;name\u0026#34;, required = false, defaultValue = \u0026#34;Guest\u0026#34;) String name) { User user = userService.getUserById(id); user.setName(name); return user; } 在上面的示例中，我们使用@RequestParam注解绑定了两个请求参数。\u0026ldquo;id\u0026quot;参数是必须的，而\u0026quot;name\u0026quot;参数是可选的。如果请求中没有传递\u0026quot;name\u0026quot;参数，则默认值为\u0026quot;Guest\u0026rdquo;。\n@RequestBody注解 使用方法 @RequestBody注解用于将HTTP请求体绑定到控制器方法的参数上。在使用@RequestBody注解时，我们需要指定请求体的数据类型。\n示例代码如下：\n1 2 3 4 @PostMapping(\u0026#34;/user\u0026#34;) public User createUser(@RequestBody User user) { return userService.createUser(user); } 在上面的示例中，@RequestBody注解绑定了请求体中的数据到createUser()方法的user参数上。\n原理 当Spring Boot应用程序接收到一个HTTP请求时，Spring框架将请求体解析为一个Java对象。在控制器方法上使用@RequestBody注解时，Spring框架会自动将请求体中的数据绑定到控制器方法的参数上。\n代码示例 1 2 3 4 5 @PostMapping(\u0026#34;/user\u0026#34;) public User createUser(@RequestBody User user) { User savedUser = userService.createUser(user); return savedUser; } 在上面的示例中，我们使用@RequestBody注解绑定了请求体中的数据到User对象上。Spring框架会自动将请求体中的数据解析为一个User对象，并将其绑定到createUser()方法的user参数上。\n@PathVariable注解 使用方法 @PathVariable注解用于将URL中的参数绑定到控制器方法的参数上。在使用@PathVariable注解时，需要在注解中指定URL中的参数名。\n示例代码如下：\n1 2 3 4 @GetMapping(\u0026#34;/user/{id}\u0026#34;) public User getUser(@PathVariable(\u0026#34;id\u0026#34;) Long id) { return userService.getUserById(id); } 在上面的示例中，@PathVariable注解绑定了URL中名为\u0026quot;id\u0026quot;的参数到getUser()方法的id参数上。\n原理 当Spring Boot应用程序接收到一个HTTP请求时，Spring框架将请求URL解析为一个名-值对的映射。在控制器方法上使用@PathVariable注解时，Spring框架会自动将URL中的参数值与控制器方法的参数绑定起来。\n代码示例 1 2 3 4 5 @GetMapping(\u0026#34;/user/{id}\u0026#34;) public User getUser(@PathVariable(\u0026#34;id\u0026#34;) Long id) { User user = userService.getUserById(id); return user; } 在上面的示例中，我们使用@PathVariable注解绑定了URL中的\u0026quot;id\u0026quot;参数到getUser()方法的id参数上。Spring框架会自动将URL中的\u0026quot;id\u0026quot;参数值绑定到id参数上，并调用getUser()方法返回相应的用户对象。\n需要注意的是，@PathVariable注解也可以使用默认值和正则表达式等属性，以适应更多的场景。\n1 2 3 4 5 6 7 @GetMapping(\u0026#34;/user/{id:[\\\\d]+}\u0026#34;) public User getUser(@PathVariable(name = \u0026#34;id\u0026#34;, required = true) Long id, @PathVariable(name = \u0026#34;name\u0026#34;, defaultValue = \u0026#34;Guest\u0026#34;) String name) { User user = userService.getUserById(id); user.setName(name); return user; } 在上面的示例中，我们使用正则表达式指定了\u0026quot;id\u0026quot;参数必须为数字，使用了required属性确保\u0026quot;id\u0026quot;参数必须存在。同时，我们使用了defaultValue属性，以便在\u0026quot;name\u0026quot;参数未指定时使用默认值\u0026quot;Guest\u0026quot;。\n对比不同 @RequestParam和@PathVariable都用于将请求参数绑定到控制器方法的参数上，但是它们的作用方式不同。@RequestParam注解绑定的参数是在请求参数中指定的，而@PathVariable注解绑定的参数是在请求URL中指定的。\n@RequestBody注解用于将HTTP请求中的请求体绑定到方法参数上。请求体可以是JSON、XML、二进制数据等类型，与@RequestParam和@PathVariable不同，@RequestBody注解绑定的参数不是单个值，而是整个请求体。\n综上所述，@RequestParam、@RequestBody、@PathVariable这三个注解在实际应用中各有所用，具体使用哪一个取决于控制器方法所需的参数类型和参数来源。\n","date":"2022-11-09T00:00:00Z","image":"https://slothhuman.github.io/img/yes.jpg","permalink":"https://slothhuman.github.io/p/%E8%AF%A6%E8%A7%A3@requestparam@requestbody@pathvariable/","title":"详解@RequestParam、@RequestBody、@PathVariable"}]